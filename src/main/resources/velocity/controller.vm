#parse("velocity/common.vm" )
#set ($controllerPackage = "#getControllerPackage(${param.packageName}${param.alias}${param.aliasUse})")
#set ($beanPackage = "#getBeanPackage(${param.packageName}${param.alias}${param.aliasUse})")
#set ($servicePackage = "#getServicePackage(${param.packageName}${param.alias}${param.aliasUse})")
package ${controllerPackage};

import com.github.pagehelper.PageInfo;
import com.taiji.eap.common.base.BaseController;
import com.taiji.eap.common.generator.bean.EasyUISubmitData;
import com.taiji.eap.common.generator.bean.LayuiTree;
import ${beanPackage}.#toUpperCase(${param.alias});
import ${servicePackage}.#toUpperCase(${param.alias})Service;
import com.taiji.eap.common.http.entity.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;

@Controller
@RequestMapping("${param.alias}")
public class #toUpperCase(${param.alias})Controller extends BaseController{

    @Autowired
    private #toUpperCase(${param.alias})Service ${param.alias}Service;

#if(${param.isTree}=="01")
    @GetMapping(value = "list")
    @ResponseBody
    public PageInfo<#toUpperCase(${param.alias})> list(#getParentIdFieldType($columns) ${parentField},Integer pageNum,Integer pageSize,String searchText){
        PageInfo<#toUpperCase(${param.alias})> pageInfo = null;
        try {
            pageInfo = ${param.alias}Service.listByPid(${parentField},pageNum,pageSize,searchText);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return pageInfo;
    }
#else
    @GetMapping(value = "list")
    @ResponseBody
    public PageInfo<#toUpperCase(${param.alias})> list(Integer pageNum,Integer pageSize,String searchText){
        PageInfo<#toUpperCase(${param.alias})> pageInfo = null;
        try {
            pageInfo = ${param.alias}Service.list(pageNum,pageSize,searchText);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return pageInfo;
    }
#end
    @PostMapping(value = "add")
    @ResponseBody
    public Response<String> add(#toUpperCase(${param.alias}) ${param.alias}){
#if(${param.isExtenaField}=="01")
        ${param.alias}.setCreateTime(new Date());
        ${param.alias}.setUpdateTime(new Date());
        ${param.alias}.setValid("1");
        ${param.alias}.setCreater(1L);
#end
        try {
            int k = ${param.alias}Service.insert(${param.alias});
            if(k>0){
                return renderSuccess("添加成功");
            }else {
                return renderError("失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return renderError(e.getMessage());
        }
    }

    @PostMapping(value = "edit")
    @ResponseBody
    public Response<String> edit(#toUpperCase(${param.alias}) ${param.alias}){
#if(${param.isExtenaField}=="01")
        ${param.alias}.setCreateTime(new Date());
        ${param.alias}.setUpdateTime(new Date());
        ${param.alias}.setValid("1");
        ${param.alias}.setCreater(1L);
#end
        try {
            int k = ${param.alias}Service.updateByPrimaryKey(${param.alias});
            if(k>0){
                return renderSuccess("修改成功");
            }else {
                return renderError("失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return renderError(e.getMessage());
        }
    }

    @PostMapping(value = "delete")
    @ResponseBody
    public Response<String> delete(#getPkFieldType($columns) #getPkProperty($columns)){
        try {
            int k = ${param.alias}Service.deleteByPrimaryKey(#getPkProperty($columns));
            if(k>0){
                return renderSuccess("删除成功");
            }else {
                return renderError("删除失败");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return renderError(e.getMessage());
        }
    }

    @GetMapping(value = "selectOne")
    @ResponseBody
    public Response<#toUpperCase(${param.alias})> selectOne(#getPkFieldType($columns) #getPkProperty($columns)){
         try {
            return renderSuccess(${param.alias}Service.selectByPrimaryKey(#getPkProperty($columns)));
         } catch (Exception e) {
             e.printStackTrace();
             return renderError(e.getMessage());
          }
    }
#if(${param.pageStyle}=="02")
    @PostMapping(value = "easyuiSubmitData")
    @ResponseBody
    public Response<String> easyuiSubmitData(@RequestBody EasyUISubmitData<#toUpperCase(${param.alias})> easyUISubmitData){
        int i = ${param.alias}Service.easyuiSubmitData(easyUISubmitData);
        if(i>0)
            return renderSuccess("提交成功");
        else
            return renderError("提交失败");
    }
#end
#if(${param.isTree}=="01")
    @GetMapping(value = "getPath")
    @ResponseBody
    public Response<List<#toUpperCase(${param.alias})>> getPath(#getPkFieldType($columns) #getPkProperty($columns)){
         try {
             return renderSuccess(${param.alias}Service.getPath(#getPkProperty($columns)));
         } catch (Exception e) {
             e.printStackTrace();
             return renderError(e.getMessage());
         }
    }

    @GetMapping(value = "listByPid")
    @ResponseBody
    public Response<List<#toUpperCase(${param.alias})>> listByPid(#getParentIdFieldType($columns) ${parentField}){
         List<#toUpperCase(${param.alias})> list = null;
         try {
             list = ${param.alias}Service.listByPid(${parentField});
             return renderSuccess(list);
         } catch (Exception e) {
             e.printStackTrace();
             return renderError(e.getMessage());
         }
    }

    @GetMapping(value = "treeView")
    @ResponseBody
    public Response<List<LayuiTree>> treeView(#getParentIdFieldType($columns) ${parentField}){
        List<LayuiTree> layuiTrees = null;
        try {
            layuiTrees = ${param.alias}Service.treeView(parentId);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return renderSuccess(layuiTrees);
    }
#end
}