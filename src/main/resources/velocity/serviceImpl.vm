#parse("velocity/common.vm" )
#set ($beanPackage = "#getBeanPackage(${param.packageName}${param.alias}${param.aliasUse})")
#set ($daoPackage = "#getDaoPackage(${param.packageName}${param.alias}${param.aliasUse})")
#set ($servicePackage = "#getServicePackage(${param.packageName}${param.alias}${param.aliasUse})")
#set ($serviceImplPackage = "#getServiceImplPackage(${param.packageName}${param.alias}${param.aliasUse})")
package ${serviceImplPackage};

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.taiji.eap.common.generator.bean.EasyUISubmitData;
import com.taiji.eap.common.generator.bean.LayuiTree;
import ${beanPackage}.#toUpperCase(${param.alias});
import ${daoPackage}.#toUpperCase(${param.alias})Dao;
import ${servicePackage}.#toUpperCase(${param.alias})Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class #toUpperCase(${param.alias})ServiceImpl implements #toUpperCase(${param.alias})Service{

    @Autowired
    private #toUpperCase(${param.alias})Dao ${param.alias}Dao;

    @Transactional
    @Override
    public int deleteByPrimaryKey(#getPkFieldType($columns) primaryKey) {
#if(${param.isTree}=="01")
        int k = 0;
        k+=${param.alias}Dao.deleteByPrimaryKey(primaryKey);
        recursiveDelete(primaryKey);
        return k;
#else
        return ${param.alias}Dao.deleteByPrimaryKey(primaryKey);
#end
    }

    @Transactional
    @Override
    public int insert(#toUpperCase(${param.alias}) ${param.alias}) {
        return ${param.alias}Dao.insert(${param.alias});
    }

    @Override
    public #toUpperCase(${param.alias}) selectByPrimaryKey(#getPkFieldType($columns) primaryKey) {
        return ${param.alias}Dao.selectByPrimaryKey(primaryKey);
    }

    @Transactional
    @Override
    public int updateByPrimaryKey(#toUpperCase(${param.alias}) ${param.alias}) {
        return ${param.alias}Dao.updateByPrimaryKey(${param.alias});
    }

    @Override
    public List<#toUpperCase(${param.alias})> list(String searchText) {
        return ${param.alias}Dao.list(searchText);
    }

    @Override
    public PageInfo<#toUpperCase(${param.alias})> list(int pageNum, int pageSize, String searchText) throws Exception {
        PageHelper.startPage(pageNum,pageSize);
        List<#toUpperCase(${param.alias})> ${param.alias}s = ${param.alias}Dao.list(searchText);
        PageInfo<#toUpperCase(${param.alias})> pageInfo = new PageInfo<#toUpperCase(${param.alias})>(${param.alias}s);
        return pageInfo;
    }
#if(${param.pageStyle}=="02")

    @Override
    public int easyuiSubmitData(EasyUISubmitData<#toUpperCase(${param.alias})> easyUISubmitData) {
        List<#toUpperCase(${param.alias})> inserted = easyUISubmitData.getInserted();
        List<#toUpperCase(${param.alias})> updated = easyUISubmitData.getUpdated();
        List<#toUpperCase(${param.alias})> deleted = easyUISubmitData.getDeleted();
        int k = 0;
        if(inserted!=null&&!inserted.isEmpty()) {
            for (int i = 0; i < inserted.size(); i++) {
#if(${param.isExtenaField}=="01")
                inserted.get(i).setCreateTime(new Date());
                inserted.get(i).setUpdateTime(new Date());
                inserted.get(i).setValid("1");
                inserted.get(i).setCreater(1L);
#end
                k += ${param.alias}Dao.insert(inserted.get(i));
            }
        }
        if(deleted!=null&&!deleted.isEmpty()) {
            for (int i = 0; i < deleted.size(); i++) {
                k += ${param.alias}Dao.deleteByPrimaryKey(deleted.get(i).get#toUpperCase("#getPkProperty($columns)")());
            }
        }
        if(updated!=null&&!updated.isEmpty()) {
            for (int i = 0; i < updated.size(); i++) {
#if(${param.isExtenaField}=="01")
                updated.get(i).setCreateTime(new Date());
                updated.get(i).setUpdateTime(new Date());
                updated.get(i).setValid("1");
                updated.get(i).setCreater(1L);
#end
                k += ${param.alias}Dao.updateByPrimaryKey(updated.get(i));
            }
        }
        return k;
    }
#end
#if(${param.isTree}=="01")

    @Override
    public List<#toUpperCase(${param.alias})> listByPid(#getParentIdFieldType($columns) ${parentField}) throws Exception {
        return ${param.alias}Dao.listByPid(${parentField},"");
    }

    @Override
    public PageInfo<#toUpperCase(${param.alias})> listByPid(#getParentIdFieldType($columns) ${parentField}, int pageNum, int pageSize, String searchText) throws Exception {
        PageHelper.startPage(pageNum, pageSize);
        List<#toUpperCase(${param.alias})> list = ${param.alias}Dao.listByPid(parentId,searchText);
        PageInfo<#toUpperCase(${param.alias})> pageInfo = new PageInfo<#toUpperCase(${param.alias})>(list);
        return pageInfo;
    }

    @Override
    public List<#toUpperCase(${param.alias})> getPath(#getPkFieldType($columns) #getPkProperty($columns)) throws Exception {
        List<#toUpperCase(${param.alias})> list = new ArrayList<#toUpperCase(${param.alias})>();
        if(#getPkProperty($columns)!=0){
            disPlay(#getPkProperty($columns), list);
        }
        list.add(new #toUpperCase(${param.alias})(0L,"根路径"));
        Collections.reverse(list);
        return list;
    }

    @Override
    public List<LayuiTree> treeView(#getParentIdFieldType($columns) ${parentField}) throws Exception {
        List<#toUpperCase(${param.alias})> list = ${param.alias}Dao.selectAll();
        List<LayuiTree> trees = new ArrayList<LayuiTree>();
        for (#toUpperCase(${param.alias}) tree: list) {
            if(${parentField}==tree.get#toUpperCase(${parentField})()){
                trees.add(findChildren(tree,list));
            }
        }
        return trees;
    }

    private #toUpperCase(${param.alias}) findChildren(#toUpperCase(${param.alias}) tree,List<#toUpperCase(${param.alias})> list){
        for (#toUpperCase(${param.alias}) ${param.alias}:list) {
            ${param.alias}.setName(${param.alias}.get#camelToUpperCase(${param.nameField})());
            ${param.alias}.setSpread(true);
            if(tree.get#getPkUpperCaseProperty($columns)()==${param.alias}.get#toUpperCase(${parentField})()){
                tree.getChildren().add(findChildren(${param.alias},list));
            }
        }
        return tree;
    }

    private void disPlay(#getPkFieldType($columns) #getPkProperty($columns),List<#toUpperCase(${param.alias})> list){
    #toUpperCase(${param.alias}) ${param.alias} = ${param.alias}Dao.selectByPrimaryKey(#getPkProperty($columns));
        if(${param.alias}!=null){
            list.add(${param.alias});
            disPlay(${param.alias}.get#camelToUpperCase(${parentField})(), list);
        }
    }

    /**
    * 递归删除
    * @param parentId
    */
    private void recursiveDelete(Long parentId){
        List<#toUpperCase(${param.alias})> ${param.alias}s =${param.alias}Dao.listByPid(parentId,"");
        if(${param.alias}s!=null&&!${param.alias}s.isEmpty()){
            for (#toUpperCase(${param.alias}) ${param.alias}: ${param.alias}s) {
                ${param.alias}Dao.deleteByPrimaryKey(${param.alias}.get#toUpperCase("#getPkProperty($columns)")());
                recursiveDelete(${param.alias}.get#toUpperCase("#getPkProperty($columns)")());
            }
        }
    }
#end
}